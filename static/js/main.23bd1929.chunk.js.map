{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","loginResponse","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useSelector","state","auth","navigate","useNavigate","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","justifyContent","FormLabel","href","target","FormControl","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","handleBlur","handleChange","App","finally","AppBar","position","Toolbar","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23bd1929.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9545288c-77f6-452d-b8fb-8b665e1a7f6b'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(loginResponse: LoginResponseType) {\r\n        return instance.post <LoginResponseType, AxiosResponse<ResponseType<{ userId: number }>>>(`/auth/login`, loginResponse)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: string, email: string, login: string }>>(`/auth/me`)\r\n    },\r\n    logOut() {\r\n        return instance.delete <ResponseType>(`/auth/login`)\r\n    }\r\n\r\n}\r\n// types\r\n\r\n\r\nexport type AuthMeResponseType = {\r\n    id: string,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\nexport type LoginResponseType = {\r\n    email: string,\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../../app/app-reducer\";\r\nimport {authAPI, LoginResponseType} from \"../../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        // case 'APP/SET-ERROR':\r\n        //     return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-IS-LOGGED-IN',\r\n    isLoggedIn\r\n} as const)\r\n\r\nexport const loginTC = (loginResponse: LoginResponseType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(loginResponse)\r\n        .then((res) => {\r\n            if (res.data.resultCode==0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch(error=> {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logOut()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\ntype setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\n\r\ntype ActionsType = setIsLoggedInACType | SetAppStatusActionType | SetAppErrorActionType\r\n","import {setIsLoggedInAC} from \"../features/TodolistsList/Login/auth-reducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({\r\n    type: 'APP/SET-IS-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedACActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACActionType\r\n\r\n\r\n///THUNKS\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error: { message: string; }) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(()=> {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            debugger\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                debugger\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            debugger\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\r\n    const navigate=useNavigate()\r\n\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            const thunk = fetchTasksTC(props.todolist.id)\r\n            dispatch(thunk)\r\n        }\r\n        else {\r\n            navigate('/login')\r\n        }\r\n\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    // if (!isLoggedIn) {\r\n    //     return <Navigate to={'/login'}/>\r\n    // }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport const TodolistsList = () => {\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\nconst navigate=useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            const thunk = fetchTodolistsTC()\r\n            dispatch(thunk)\r\n        }\r\n        else {\r\n            return navigate ('/login')\r\n        }\r\n\r\n    }, [isLoggedIn])\r\n\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Empty password'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Use more than 3 symbols'\r\n            }\r\n\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n\r\n            formik.resetForm()\r\n            debugger;\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormLabel>\r\n                <p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'}> here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormControl>\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\"\r\n                                   type=\"email\"\r\n                                   {...formik.getFieldProps('email')}\r\n\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'} control={\r\n                            <Checkbox checked={formik.values.rememberMe} {...formik.getFieldProps('rememberMe')}\r\n                                      onBlur={formik.handleBlur} onChange={formik.handleChange}\r\n                            />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/TodolistsList/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/TodolistsList/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App() {\r\n\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n\r\n\r\n                    {isLoggedIn && <Button onClick={onClickHandler} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/404' element={<h1>Page not Found</h1>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/TodolistsList/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth:authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n            </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}